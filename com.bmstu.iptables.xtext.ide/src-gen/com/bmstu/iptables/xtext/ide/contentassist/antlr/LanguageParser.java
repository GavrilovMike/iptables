/*
 * generated by Xtext 2.12.0
 */
package com.bmstu.iptables.xtext.ide.contentassist.antlr;

import com.bmstu.iptables.xtext.ide.contentassist.antlr.internal.InternalLanguageParser;
import com.bmstu.iptables.xtext.services.LanguageGrammarAccess;
import com.google.inject.Inject;
import java.util.HashMap;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class LanguageParser extends AbstractContentAssistParser {

	@Inject
	private LanguageGrammarAccess grammarAccess;

	private Map<AbstractElement, String> nameMappings;

	@Override
	protected InternalLanguageParser createParser() {
		InternalLanguageParser result = new InternalLanguageParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		if (nameMappings == null) {
			nameMappings = new HashMap<AbstractElement, String>() {
				private static final long serialVersionUID = 1L;
				{
					put(grammarAccess.getChainTypeAccess().getAlternatives(), "rule__ChainType__Alternatives");
					put(grammarAccess.getPolicyTypeAccess().getAlternatives(), "rule__PolicyType__Alternatives");
					put(grammarAccess.getChainAccess().getGroup(), "rule__Chain__Group__0");
					put(grammarAccess.getChainPartAccess().getGroup(), "rule__ChainPart__Group__0");
					put(grammarAccess.getModelAccess().getChainsAssignment(), "rule__Model__ChainsAssignment");
					put(grammarAccess.getChainAccess().getChainTypeAssignment_1(), "rule__Chain__ChainTypeAssignment_1");
					put(grammarAccess.getChainAccess().getPolicyTypeAssignment_4(), "rule__Chain__PolicyTypeAssignment_4");
					put(grammarAccess.getChainAccess().getPartsAssignment_11(), "rule__Chain__PartsAssignment_11");
					put(grammarAccess.getChainPartAccess().getTargetAssignment_0(), "rule__ChainPart__TargetAssignment_0");
					put(grammarAccess.getChainPartAccess().getProtAssignment_1(), "rule__ChainPart__ProtAssignment_1");
					put(grammarAccess.getChainPartAccess().getOptAssignment_2(), "rule__ChainPart__OptAssignment_2");
					put(grammarAccess.getChainPartAccess().getSourceAssignment_3(), "rule__ChainPart__SourceAssignment_3");
					put(grammarAccess.getChainPartAccess().getDestinationAssignment_4(), "rule__ChainPart__DestinationAssignment_4");
				}
			};
		}
		return nameMappings.get(element);
	}
			
	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public LanguageGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(LanguageGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
}
