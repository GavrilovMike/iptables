/*
 * generated by Xtext 2.12.0
 */
package com.bmstu.iptables.xtext.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder.AbstractGrammarElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class LanguageGrammarAccess extends AbstractGrammarElementFinder {
	
	public class ModelElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bmstu.iptables.xtext.Language.Model");
		private final Assignment cChainsAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cChainsChainParserRuleCall_0 = (RuleCall)cChainsAssignment.eContents().get(0);
		
		//Model:
		//	chains+=Chain*;
		@Override public ParserRule getRule() { return rule; }
		
		//chains+=Chain*
		public Assignment getChainsAssignment() { return cChainsAssignment; }
		
		//Chain
		public RuleCall getChainsChainParserRuleCall_0() { return cChainsChainParserRuleCall_0; }
	}
	public class ChainElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bmstu.iptables.xtext.Language.Chain");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cChainKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cChainTypeAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cChainTypeChainTypeEnumRuleCall_1_0 = (RuleCall)cChainTypeAssignment_1.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cPolicyKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cPolicyTypeAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPolicyTypePolicyTypeEnumRuleCall_4_0 = (RuleCall)cPolicyTypeAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Keyword cTargetKeyword_6 = (Keyword)cGroup.eContents().get(6);
		private final Keyword cProtKeyword_7 = (Keyword)cGroup.eContents().get(7);
		private final Keyword cOptKeyword_8 = (Keyword)cGroup.eContents().get(8);
		private final Keyword cSourceKeyword_9 = (Keyword)cGroup.eContents().get(9);
		private final Keyword cDestinationKeyword_10 = (Keyword)cGroup.eContents().get(10);
		private final Assignment cPartsAssignment_11 = (Assignment)cGroup.eContents().get(11);
		private final RuleCall cPartsChainPartParserRuleCall_11_0 = (RuleCall)cPartsAssignment_11.eContents().get(0);
		
		//Chain:
		//	'Chain' chainType=ChainType '(' 'policy' policyType=PolicyType ')'
		//	'target' 'prot' 'opt' 'source' 'destination'
		//	parts+=ChainPart*;
		@Override public ParserRule getRule() { return rule; }
		
		//'Chain' chainType=ChainType '(' 'policy' policyType=PolicyType ')' 'target' 'prot' 'opt' 'source' 'destination'
		//parts+=ChainPart*
		public Group getGroup() { return cGroup; }
		
		//'Chain'
		public Keyword getChainKeyword_0() { return cChainKeyword_0; }
		
		//chainType=ChainType
		public Assignment getChainTypeAssignment_1() { return cChainTypeAssignment_1; }
		
		//ChainType
		public RuleCall getChainTypeChainTypeEnumRuleCall_1_0() { return cChainTypeChainTypeEnumRuleCall_1_0; }
		
		//'('
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//'policy'
		public Keyword getPolicyKeyword_3() { return cPolicyKeyword_3; }
		
		//policyType=PolicyType
		public Assignment getPolicyTypeAssignment_4() { return cPolicyTypeAssignment_4; }
		
		//PolicyType
		public RuleCall getPolicyTypePolicyTypeEnumRuleCall_4_0() { return cPolicyTypePolicyTypeEnumRuleCall_4_0; }
		
		//')'
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//'target'
		public Keyword getTargetKeyword_6() { return cTargetKeyword_6; }
		
		//'prot'
		public Keyword getProtKeyword_7() { return cProtKeyword_7; }
		
		//'opt'
		public Keyword getOptKeyword_8() { return cOptKeyword_8; }
		
		//'source'
		public Keyword getSourceKeyword_9() { return cSourceKeyword_9; }
		
		//'destination'
		public Keyword getDestinationKeyword_10() { return cDestinationKeyword_10; }
		
		//parts+=ChainPart*
		public Assignment getPartsAssignment_11() { return cPartsAssignment_11; }
		
		//ChainPart
		public RuleCall getPartsChainPartParserRuleCall_11_0() { return cPartsChainPartParserRuleCall_11_0; }
	}
	public class ChainPartElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "com.bmstu.iptables.xtext.Language.ChainPart");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cTargetAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cTargetPolicyTypeEnumRuleCall_0_0 = (RuleCall)cTargetAssignment_0.eContents().get(0);
		private final Assignment cProtAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cProtSTRINGTerminalRuleCall_1_0 = (RuleCall)cProtAssignment_1.eContents().get(0);
		private final Assignment cOptAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOptSTRINGTerminalRuleCall_2_0 = (RuleCall)cOptAssignment_2.eContents().get(0);
		private final Assignment cSourceAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cSourceIP_ADDRESSTerminalRuleCall_3_0 = (RuleCall)cSourceAssignment_3.eContents().get(0);
		private final Assignment cDestinationAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cDestinationIP_ADDRESSTerminalRuleCall_4_0 = (RuleCall)cDestinationAssignment_4.eContents().get(0);
		
		//ChainPart:
		//	target=PolicyType prot=STRING opt=STRING source=IP_ADDRESS destination=IP_ADDRESS;
		@Override public ParserRule getRule() { return rule; }
		
		//target=PolicyType prot=STRING opt=STRING source=IP_ADDRESS destination=IP_ADDRESS
		public Group getGroup() { return cGroup; }
		
		//target=PolicyType
		public Assignment getTargetAssignment_0() { return cTargetAssignment_0; }
		
		//PolicyType
		public RuleCall getTargetPolicyTypeEnumRuleCall_0_0() { return cTargetPolicyTypeEnumRuleCall_0_0; }
		
		//prot=STRING
		public Assignment getProtAssignment_1() { return cProtAssignment_1; }
		
		//STRING
		public RuleCall getProtSTRINGTerminalRuleCall_1_0() { return cProtSTRINGTerminalRuleCall_1_0; }
		
		//opt=STRING
		public Assignment getOptAssignment_2() { return cOptAssignment_2; }
		
		//STRING
		public RuleCall getOptSTRINGTerminalRuleCall_2_0() { return cOptSTRINGTerminalRuleCall_2_0; }
		
		//source=IP_ADDRESS
		public Assignment getSourceAssignment_3() { return cSourceAssignment_3; }
		
		//IP_ADDRESS
		public RuleCall getSourceIP_ADDRESSTerminalRuleCall_3_0() { return cSourceIP_ADDRESSTerminalRuleCall_3_0; }
		
		//destination=IP_ADDRESS
		public Assignment getDestinationAssignment_4() { return cDestinationAssignment_4; }
		
		//IP_ADDRESS
		public RuleCall getDestinationIP_ADDRESSTerminalRuleCall_4_0() { return cDestinationIP_ADDRESSTerminalRuleCall_4_0; }
	}
	
	public class ChainTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.bmstu.iptables.xtext.Language.ChainType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cINPUTEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cINPUTINPUTKeyword_0_0 = (Keyword)cINPUTEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cOUTPUTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cOUTPUTOUTPUTKeyword_1_0 = (Keyword)cOUTPUTEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cFORWARDEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cFORWARDFORWARDKeyword_2_0 = (Keyword)cFORWARDEnumLiteralDeclaration_2.eContents().get(0);
		private final EnumLiteralDeclaration cPREROUTINGEnumLiteralDeclaration_3 = (EnumLiteralDeclaration)cAlternatives.eContents().get(3);
		private final Keyword cPREROUTINGPREROUTINGKeyword_3_0 = (Keyword)cPREROUTINGEnumLiteralDeclaration_3.eContents().get(0);
		private final EnumLiteralDeclaration cPOSTROUTINGEnumLiteralDeclaration_4 = (EnumLiteralDeclaration)cAlternatives.eContents().get(4);
		private final Keyword cPOSTROUTINGPOSTROUTINGKeyword_4_0 = (Keyword)cPOSTROUTINGEnumLiteralDeclaration_4.eContents().get(0);
		
		//enum ChainType:
		//	INPUT | OUTPUT | FORWARD | PREROUTING | POSTROUTING;
		public EnumRule getRule() { return rule; }
		
		//INPUT | OUTPUT | FORWARD | PREROUTING | POSTROUTING
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//INPUT
		public EnumLiteralDeclaration getINPUTEnumLiteralDeclaration_0() { return cINPUTEnumLiteralDeclaration_0; }
		
		//'INPUT'
		public Keyword getINPUTINPUTKeyword_0_0() { return cINPUTINPUTKeyword_0_0; }
		
		//OUTPUT
		public EnumLiteralDeclaration getOUTPUTEnumLiteralDeclaration_1() { return cOUTPUTEnumLiteralDeclaration_1; }
		
		//'OUTPUT'
		public Keyword getOUTPUTOUTPUTKeyword_1_0() { return cOUTPUTOUTPUTKeyword_1_0; }
		
		//FORWARD
		public EnumLiteralDeclaration getFORWARDEnumLiteralDeclaration_2() { return cFORWARDEnumLiteralDeclaration_2; }
		
		//'FORWARD'
		public Keyword getFORWARDFORWARDKeyword_2_0() { return cFORWARDFORWARDKeyword_2_0; }
		
		//PREROUTING
		public EnumLiteralDeclaration getPREROUTINGEnumLiteralDeclaration_3() { return cPREROUTINGEnumLiteralDeclaration_3; }
		
		//'PREROUTING'
		public Keyword getPREROUTINGPREROUTINGKeyword_3_0() { return cPREROUTINGPREROUTINGKeyword_3_0; }
		
		//POSTROUTING
		public EnumLiteralDeclaration getPOSTROUTINGEnumLiteralDeclaration_4() { return cPOSTROUTINGEnumLiteralDeclaration_4; }
		
		//'POSTROUTING'
		public Keyword getPOSTROUTINGPOSTROUTINGKeyword_4_0() { return cPOSTROUTINGPOSTROUTINGKeyword_4_0; }
	}
	public class PolicyTypeElements extends AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "com.bmstu.iptables.xtext.Language.PolicyType");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cDROPEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cDROPDROPKeyword_0_0 = (Keyword)cDROPEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cACCEPTEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cACCEPTACCEPTKeyword_1_0 = (Keyword)cACCEPTEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum PolicyType:
		//	DROP | ACCEPT;
		public EnumRule getRule() { return rule; }
		
		//DROP | ACCEPT
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//DROP
		public EnumLiteralDeclaration getDROPEnumLiteralDeclaration_0() { return cDROPEnumLiteralDeclaration_0; }
		
		//'DROP'
		public Keyword getDROPDROPKeyword_0_0() { return cDROPDROPKeyword_0_0; }
		
		//ACCEPT
		public EnumLiteralDeclaration getACCEPTEnumLiteralDeclaration_1() { return cACCEPTEnumLiteralDeclaration_1; }
		
		//'ACCEPT'
		public Keyword getACCEPTACCEPTKeyword_1_0() { return cACCEPTACCEPTKeyword_1_0; }
	}
	
	private final ModelElements pModel;
	private final ChainElements pChain;
	private final ChainTypeElements eChainType;
	private final PolicyTypeElements ePolicyType;
	private final ChainPartElements pChainPart;
	private final TerminalRule tIP_ADDRESS;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public LanguageGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pModel = new ModelElements();
		this.pChain = new ChainElements();
		this.eChainType = new ChainTypeElements();
		this.ePolicyType = new PolicyTypeElements();
		this.pChainPart = new ChainPartElements();
		this.tIP_ADDRESS = (TerminalRule) GrammarUtil.findRuleForName(getGrammar(), "com.bmstu.iptables.xtext.Language.IP_ADDRESS");
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("com.bmstu.iptables.xtext.Language".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Model:
	//	chains+=Chain*;
	public ModelElements getModelAccess() {
		return pModel;
	}
	
	public ParserRule getModelRule() {
		return getModelAccess().getRule();
	}
	
	//Chain:
	//	'Chain' chainType=ChainType '(' 'policy' policyType=PolicyType ')'
	//	'target' 'prot' 'opt' 'source' 'destination'
	//	parts+=ChainPart*;
	public ChainElements getChainAccess() {
		return pChain;
	}
	
	public ParserRule getChainRule() {
		return getChainAccess().getRule();
	}
	
	//enum ChainType:
	//	INPUT | OUTPUT | FORWARD | PREROUTING | POSTROUTING;
	public ChainTypeElements getChainTypeAccess() {
		return eChainType;
	}
	
	public EnumRule getChainTypeRule() {
		return getChainTypeAccess().getRule();
	}
	
	//enum PolicyType:
	//	DROP | ACCEPT;
	public PolicyTypeElements getPolicyTypeAccess() {
		return ePolicyType;
	}
	
	public EnumRule getPolicyTypeRule() {
		return getPolicyTypeAccess().getRule();
	}
	
	//ChainPart:
	//	target=PolicyType prot=STRING opt=STRING source=IP_ADDRESS destination=IP_ADDRESS;
	public ChainPartElements getChainPartAccess() {
		return pChainPart;
	}
	
	public ParserRule getChainPartRule() {
		return getChainPartAccess().getRule();
	}
	
	//terminal IP_ADDRESS:
	//	'anywhere' | '!'? INT '.' INT '.' INT '.' INT '/' INT (',' '!'? INT '.' INT '.' INT '.' INT '/' INT)*;
	public TerminalRule getIP_ADDRESSRule() {
		return tIP_ADDRESS;
	}
	
	//terminal ID:
	//	'^'? ('a'..'z' | 'A'..'Z' | '_') ('a'..'z' | 'A'..'Z' | '_' | '0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt:
	//	'0'..'9'+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//	'"' ('\\' . | !('\\' | '"'))* '"' | "'" ('\\' . | !('\\' | "'"))* "'";
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT:
	//	'/*'->'*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT:
	//	'//' !('\n' | '\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS:
	//	' ' | '\t' | '\r' | '\n'+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER:
	//	.;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
