/**
 * generated by Xtext 2.12.0
 */
package com.bmstu.iptables.xtext.language.impl;

import com.bmstu.iptables.xtext.language.Chain;
import com.bmstu.iptables.xtext.language.ChainPart;
import com.bmstu.iptables.xtext.language.ChainType;
import com.bmstu.iptables.xtext.language.LanguagePackage;
import com.bmstu.iptables.xtext.language.PolicyType;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Chain</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link com.bmstu.iptables.xtext.language.impl.ChainImpl#getChainType <em>Chain Type</em>}</li>
 *   <li>{@link com.bmstu.iptables.xtext.language.impl.ChainImpl#getPolicyType <em>Policy Type</em>}</li>
 *   <li>{@link com.bmstu.iptables.xtext.language.impl.ChainImpl#getParts <em>Parts</em>}</li>
 * </ul>
 *
 * @generated
 */
public class ChainImpl extends MinimalEObjectImpl.Container implements Chain
{
  /**
   * The default value of the '{@link #getChainType() <em>Chain Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChainType()
   * @generated
   * @ordered
   */
  protected static final ChainType CHAIN_TYPE_EDEFAULT = ChainType.INPUT;

  /**
   * The cached value of the '{@link #getChainType() <em>Chain Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChainType()
   * @generated
   * @ordered
   */
  protected ChainType chainType = CHAIN_TYPE_EDEFAULT;

  /**
   * The default value of the '{@link #getPolicyType() <em>Policy Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPolicyType()
   * @generated
   * @ordered
   */
  protected static final PolicyType POLICY_TYPE_EDEFAULT = PolicyType.DROP;

  /**
   * The cached value of the '{@link #getPolicyType() <em>Policy Type</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPolicyType()
   * @generated
   * @ordered
   */
  protected PolicyType policyType = POLICY_TYPE_EDEFAULT;

  /**
   * The cached value of the '{@link #getParts() <em>Parts</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getParts()
   * @generated
   * @ordered
   */
  protected EList<ChainPart> parts;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected ChainImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return LanguagePackage.Literals.CHAIN;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public ChainType getChainType()
  {
    return chainType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setChainType(ChainType newChainType)
  {
    ChainType oldChainType = chainType;
    chainType = newChainType == null ? CHAIN_TYPE_EDEFAULT : newChainType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.CHAIN__CHAIN_TYPE, oldChainType, chainType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public PolicyType getPolicyType()
  {
    return policyType;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public void setPolicyType(PolicyType newPolicyType)
  {
    PolicyType oldPolicyType = policyType;
    policyType = newPolicyType == null ? POLICY_TYPE_EDEFAULT : newPolicyType;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, LanguagePackage.CHAIN__POLICY_TYPE, oldPolicyType, policyType));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public EList<ChainPart> getParts()
  {
    if (parts == null)
    {
      parts = new EObjectContainmentEList<ChainPart>(ChainPart.class, this, LanguagePackage.CHAIN__PARTS);
    }
    return parts;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case LanguagePackage.CHAIN__PARTS:
        return ((InternalEList<?>)getParts()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case LanguagePackage.CHAIN__CHAIN_TYPE:
        return getChainType();
      case LanguagePackage.CHAIN__POLICY_TYPE:
        return getPolicyType();
      case LanguagePackage.CHAIN__PARTS:
        return getParts();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case LanguagePackage.CHAIN__CHAIN_TYPE:
        setChainType((ChainType)newValue);
        return;
      case LanguagePackage.CHAIN__POLICY_TYPE:
        setPolicyType((PolicyType)newValue);
        return;
      case LanguagePackage.CHAIN__PARTS:
        getParts().clear();
        getParts().addAll((Collection<? extends ChainPart>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.CHAIN__CHAIN_TYPE:
        setChainType(CHAIN_TYPE_EDEFAULT);
        return;
      case LanguagePackage.CHAIN__POLICY_TYPE:
        setPolicyType(POLICY_TYPE_EDEFAULT);
        return;
      case LanguagePackage.CHAIN__PARTS:
        getParts().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case LanguagePackage.CHAIN__CHAIN_TYPE:
        return chainType != CHAIN_TYPE_EDEFAULT;
      case LanguagePackage.CHAIN__POLICY_TYPE:
        return policyType != POLICY_TYPE_EDEFAULT;
      case LanguagePackage.CHAIN__PARTS:
        return parts != null && !parts.isEmpty();
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuffer result = new StringBuffer(super.toString());
    result.append(" (chainType: ");
    result.append(chainType);
    result.append(", policyType: ");
    result.append(policyType);
    result.append(')');
    return result.toString();
  }

} //ChainImpl
